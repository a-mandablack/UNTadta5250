{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "John Smith 30 5.9\n"
     ]
    }
   ],
   "source": [
    "#Problem 1\n",
    "Name = \"John Smith\"\n",
    "Age = 30\n",
    "Height = 5.9\n",
    "\n",
    "print(Name, Age, Height)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Radius: 2\n",
      "Enter unit of measurement in ft, in, cm, or m: ft\n",
      "12.56 ft\n"
     ]
    }
   ],
   "source": [
    "#Problem 2\n",
    "#Measurements\n",
    "Radius = float(input(\"Radius: \"))\n",
    "Pi = 3.14\n",
    "Diameter = (Radius*Radius)\n",
    "Unit = input(\"Enter unit of measurement in ft, in, cm, or m: \")\n",
    "\n",
    "#checking that the radius is positive and the unit is accepted\n",
    "if Radius > 0:\n",
    "    if Unit == \"ft\" or \"in\" or \"cm\" or \"m\":\n",
    "        print((Diameter*Pi),Unit)   \n",
    "else:\n",
    "    print(\"Check again, the radius must be in ft, in, cm, or m and cannot be a negative number.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Account Balance: 100000\n",
      "Interest Rate: 1.25\n",
      "104.17\n"
     ]
    }
   ],
   "source": [
    "#Problem 3\n",
    "Bal = float(input(\"Account Balance: \"))\n",
    "Rate = float(input(\"Interest Rate: \"))\n",
    "\n",
    "if Bal < 0 or Rate < 0: \n",
    "    print(\"Account Balane and Interest Rate cannot be negative numbers\")\n",
    "else: \n",
    "    print(round(Bal*(Rate/1200), 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pack 1 Weight: 100\n",
      "Pack 1 Price: 10\n",
      "Pack 2 Weight: 1000\n",
      "Pack 2 Price: 10\n",
      "Buy Pack 1.\n"
     ]
    }
   ],
   "source": [
    "#Problem 4\n",
    "\n",
    "sugWeightOne = float(input(\"Pack 1 Weight: \"))\n",
    "sugPriceOne = float(input(\"Pack 1 Price: \"))\n",
    "sugWeightTwo = float (input(\"Pack 2 Weight: \"))\n",
    "sugPriceTwo = float(input(\"Pack 2 Price: \"))\n",
    "costOne = sugWeightOne/sugPriceOne\n",
    "costTwo = sugWeightTwo/sugPriceTwo\n",
    "\n",
    "if costOne < 0 or costTwo < 0: \n",
    "    print(\"Weights and Prices must be positive number\")\n",
    "elif costOne > costTwo:\n",
    "    print(\"Buy Pack 2\")\n",
    "elif costOne < costTwo:\n",
    "    print(\"Buy Pack 1.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input a number: 14\n",
      "0xe\n"
     ]
    }
   ],
   "source": [
    "numList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n",
    "inp = int(input(\"Input a number: \"))\n",
    "\n",
    "if inp in numList: \n",
    "    print(hex(inp))\n",
    "else: \n",
    "    print(\"Out of Range\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
